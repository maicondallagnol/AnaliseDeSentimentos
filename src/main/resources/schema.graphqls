type Query {
  getAllSentimento: [Sentimento]

  getAllFrase: [Frase]

  allUsuarios: [Usuario]

  getAnalises(id_usuario: ID!): [Analise]

  getAnalise(id_analise: ID!): Analise

  getRandomAnalise(id_sentimento: ID!): Analise

  autenticarLogin(username: String!, senha: String!): Login!

  existsUsername(username: String!): Boolean

  getUsuarioLogin(id_login: ID!): Usuario

  getUsuario(id_usuario: ID!): Usuario

  getImages: [Imagem]
}

type Mutation {
  addFrase(frase: String!): Frase!
  deleteFrase(id: ID!): Boolean!

  addSentimento(nome: String!, descricao: String!, id_imagem: ID!): Boolean
  deleteSentimento(id: ID!): Boolean

  addAnalise(id_frase: ID!, id_sentimento: ID!, id_usuario: ID!, correto: Boolean): Analise
  makeAnalise(id_frase: ID!, id_usuario: ID!): Analise
  updateCorreto(id_analise: ID!, correto: Boolean!): Boolean

  addUsuario(nome: String!, sobrenome: String!, data_nasc: String!, sexo: String!, id_contato: ID!, id_endereco: ID!, id_login: ID!): Usuario!
  addLogin(nomeUsuario: String!, senha: String!): Login!
  addContato(email: String!, celular: String!): Contato!
  addEndereco(rua: String, numero: String, cep: String, cidade: String, estado: String): Endereco!
}

type Frase {
 id: ID
 texto: String!
}


type Sentimento {
  id: ID
  nome: String!
  descricao: String!
  imagem: Imagem!
}

type Usuario {
  id: ID
  nome: String!
  sobrenome: String!
  data_nasc: String
  sexo: String
  contato: Contato!
  endereco: Endereco!
  login: Login!
}

type Analise {
  id: ID
  frase: Frase!
  sentimento: Sentimento!
  usuario: Usuario!
  novo: Boolean
  correto: Boolean
  dataAnalise: String
}

type Login {
  id: ID
  username: String!
  senha: String!
}

type Contato {
  id: ID
  email: String!
  celular: String!
}

type Endereco {
  id: ID
  rua: String
  numero: String!
  cep: String!
  cidade: String!
  estado: String!
}

type Imagem{
  id: ID
  caminho: String!
  nome: String!
}